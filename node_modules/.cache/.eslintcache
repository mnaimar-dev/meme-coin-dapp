[{"/Users/Nicoaimar/Library/CloudStorage/OneDrive-UNIVERSIDADBLASPASCAL/Archivos Mac/Solidity/Cadena Projects/coin-smartcontract/my-dapp/src/index.js":"1","/Users/Nicoaimar/Library/CloudStorage/OneDrive-UNIVERSIDADBLASPASCAL/Archivos Mac/Solidity/Cadena Projects/coin-smartcontract/my-dapp/src/App.js":"2"},{"size":175,"mtime":1640751088000,"results":"3","hashOfConfig":"4"},{"size":9412,"mtime":1652501116832,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14c1yzv",{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/Users/Nicoaimar/Library/CloudStorage/OneDrive-UNIVERSIDADBLASPASCAL/Archivos Mac/Solidity/Cadena Projects/coin-smartcontract/my-dapp/src/index.js",[],"/Users/Nicoaimar/Library/CloudStorage/OneDrive-UNIVERSIDADBLASPASCAL/Archivos Mac/Solidity/Cadena Projects/coin-smartcontract/my-dapp/src/App.js",["11"],"import { useState, useEffect } from \"react\";\nimport { ethers, utils } from \"ethers\";\nimport abi from \"./contracts/MemeCoin.json\";\n\nfunction App() {\n  const [isWalletConnected, setIsWalletConnected] = useState(false);\n  const [inputValue, setInputValue] = useState({\n    walletAddress: \"\",\n    transferAmount: \"\",\n    burnAmount: \"\",\n    mintAmount: \"\",\n  });\n  const [tokenName, setTokenName] = useState(\"\");\n  const [tokenSymbol, setTokenSymbol] = useState(\"\");\n  const [tokenTotalSupply, setTokenTotalSupply] = useState(0);\n  const [isTokenOwner, setIsTokenOwner] = useState(false);\n  const [tokenOwnerAddress, setTokenOwnerAddress] = useState(null);\n  const [yourWalletAddress, setYourWalletAddress] = useState(null);\n  const [error, setError] = useState(null);\n\n  const contractAddress = \"0xA0117DB670F98fd18E61E2e687ACb6012d25a6cA\";\n  const contractABI = abi.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const account = accounts[0];\n        setIsWalletConnected(true);\n        setYourWalletAddress(account);\n        console.log(\"Account Connected: \", account);\n      } else {\n        setError(\"Install a MetaMask wallet to get our token.\");\n        console.log(\"No Metamask detected\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getTokenInfo = async () => {\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const tokenContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n        const [account] = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n\n        let tokenName = await tokenContract.name();\n        let tokenSymbol = await tokenContract.symbol();\n        let tokenOwner = await tokenContract.owner();\n        let tokenSupply = await tokenContract.totalSupply();\n        tokenSupply = utils.formatEther(tokenSupply);\n\n        setTokenName(`${tokenName} 👨🏻‍💻`);\n        setTokenSymbol(tokenSymbol);\n        setTokenTotalSupply(tokenSupply);\n        setTokenOwnerAddress(tokenOwner);\n\n        if (account.toLowerCase() === tokenOwner.toLowerCase()) {\n          setIsTokenOwner(true);\n        }\n\n        console.log(\"Token Name: \", tokenName);\n        console.log(\"Token Symbol: \", tokenSymbol);\n        console.log(\"Token Supply: \", tokenSupply);\n        console.log(\"Token Owner: \", tokenOwner);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const transferToken = async (event) => {\n    event.preventDefault();\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const tokenContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        const txn = await tokenContract.transfer(\n          inputValue.walletAddress,\n          utils.parseEther(inputValue.transferAmount)\n        );\n        console.log(\"Transfering tokens...\");\n        await txn.wait();\n        console.log(\"Tokens Transfered\", txn.hash);\n      } else {\n        console.log(\"Ethereum object not found, install Metamask.\");\n        setError(\"Install a MetaMask wallet to get our token.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const burnTokens = async (event) => {\n    event.preventDefault();\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const tokenContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        const txn = await tokenContract.burn(\n          utils.parseEther(inputValue.burnAmount)\n        );\n        console.log(\"Burning tokens...\");\n        await txn.wait();\n        console.log(\"Tokens burned...\", txn.hash);\n\n        let tokenSupply = await tokenContract.totalSupply();\n        tokenSupply = utils.formatEther(tokenSupply);\n        setTokenTotalSupply(tokenSupply);\n      } else {\n        console.log(\"Ethereum object not found, install Metamask.\");\n        setError(\"Install a MetaMask wallet to get our token.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const mintTokens = async (event) => {\n    event.preventDefault();\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const tokenContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n        let tokenOwner = await tokenContract.owner();\n        const txn = await tokenContract.mint(\n          tokenOwner,\n          utils.parseEther(inputValue.mintAmount)\n        );\n        console.log(\"Minting tokens...\");\n        await txn.wait();\n        console.log(\"Tokens minted...\", txn.hash);\n\n        let tokenSupply = await tokenContract.totalSupply();\n        tokenSupply = utils.formatEther(tokenSupply);\n        setTokenTotalSupply(tokenSupply);\n      } else {\n        console.log(\"Ethereum object not found, install Metamask.\");\n        setError(\"Install a MetaMask wallet to get our token.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleInputChange = (event) => {\n    setInputValue((prevFormData) => ({\n      ...prevFormData,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    getTokenInfo();\n  }, []);\n\n  return (\n    <main className=\"main-container\">\n      <h2 className=\"headline\">\n        <span className=\"headline-gradient\">Meme Coin Project</span>\n        <img\n          className=\"inline p-3 ml-2\"\n          src=\"https://i.imgur.com/5JfHKHU.png\"\n          alt=\"Meme Coin\"\n          width=\"60\"\n          height=\"30\"\n        />\n      </h2>\n      <section className=\"customer-section px-10 pt-5 pb-10\">\n        {error && <p className=\"text-2xl text-red-700\">{error}</p>}\n        <div className=\"mt-5\">\n          <span className=\"mr-5\">\n            <strong>Coin:</strong> {tokenName}{\" \"}\n          </span>\n          <span className=\"mr-5\">\n            <strong>Ticker:</strong> {tokenSymbol}{\" \"}\n          </span>\n          <span className=\"mr-5\">\n            <strong>Total Supply:</strong> {tokenTotalSupply}\n          </span>\n        </div>\n        <div className=\"mt-7 mb-9\">\n          <form className=\"form-style\">\n            <input\n              type=\"text\"\n              className=\"input-double\"\n              onChange={handleInputChange}\n              name=\"walletAddress\"\n              placeholder=\"Wallet Address\"\n              value={inputValue.walletAddress}\n            />\n            <input\n              type=\"text\"\n              className=\"input-double\"\n              onChange={handleInputChange}\n              name=\"transferAmount\"\n              placeholder={`0.0000 ${tokenSymbol}`}\n              value={inputValue.transferAmount}\n            />\n            <button className=\"btn-purple\" onClick={transferToken}>\n              Transfer Tokens\n            </button>\n          </form>\n        </div>\n        {isTokenOwner && (\n          <section>\n            <div className=\"mt-10 mb-10\">\n              <form className=\"form-style\">\n                <input\n                  type=\"text\"\n                  className=\"input-style\"\n                  onChange={handleInputChange}\n                  name=\"burnAmount\"\n                  placeholder={`0.0000 ${tokenSymbol}`}\n                  value={inputValue.burnAmount}\n                />\n                <button className=\"btn-purple\" onClick={burnTokens}>\n                  Burn Tokens\n                </button>\n              </form>\n            </div>\n            <div className=\"mt-10 mb-10\">\n              <form className=\"form-style\">\n                <input\n                  type=\"text\"\n                  className=\"input-style\"\n                  onChange={handleInputChange}\n                  name=\"mintAmount\"\n                  placeholder={`0.0000 ${tokenSymbol}`}\n                  value={inputValue.mintAmount}\n                />\n                <button className=\"btn-purple\" onClick={mintTokens}>\n                  Mint Tokens\n                </button>\n              </form>\n            </div>\n          </section>\n        )}\n        <div className=\"mt-5\">\n          <p>\n            <span className=\"font-bold\">Contract Address: </span>\n            {contractAddress}\n          </p>\n        </div>\n        <div className=\"mt-5\">\n          <p>\n            <span className=\"font-bold\">Token Owner Address: </span>\n            {tokenOwnerAddress}\n          </p>\n        </div>\n        <div className=\"mt-5\">\n          {isWalletConnected && (\n            <p>\n              <span className=\"font-bold\">Your Wallet Address: </span>\n              {yourWalletAddress}\n            </p>\n          )}\n          <button className=\"btn-connect\" onClick={checkIfWalletIsConnected}>\n            {isWalletConnected ? \"Wallet Connected 🔒\" : \"Connect Wallet 🔑\"}\n          </button>\n        </div>\n      </section>\n    </main>\n  );\n}\nexport default App;\n",{"ruleId":"12","severity":1,"message":"13","line":183,"column":6,"nodeType":"14","endLine":183,"endColumn":8,"suggestions":"15"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getTokenInfo'. Either include it or remove the dependency array.","ArrayExpression",["16"],{"desc":"17","fix":"18"},"Update the dependencies array to be: [getTokenInfo]",{"range":"19","text":"20"},[5782,5784],"[getTokenInfo]"]